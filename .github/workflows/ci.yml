name: CI

on:
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]

jobs:
  windows-msys2:
    name: Win64.${{ matrix.compiler.compiler }}.${{ matrix.eco.name }}.${{ matrix.btype }}
    runs-on: windows-latest
    strategy:
      fail-fast: true
      matrix:
        btype:
          - RelWithDebInfo
        compiler:
          - { compiler: GNU,  CC: gcc,   CXX: g++ }
          - { compiler: LLVM, CC: clang, CXX: clang++ }
        #Release works on GNU & LLVM, Debug only on GNU. todo: use if to exclude
        eco:
          - {
              name: normal,
              defines: ""
            }
          - {
              name: "NoEverything",
              defines: 
                -DUSE_OPENMP=OFF 
                -DUSE_OPENCL=OFF 
                -DUSE_LUA=OFF 
                -DUSE_GAME=OFF 
                -DUSE_CAMERA_SUPPORT=OFF 
                -DUSE_NLS=OFF 
                -DUSE_GRAPHICSMAGICK=OFF 
                -DUSE_OPENJPEG=OFF 
                -DUSE_WEBP=OFF 
                -DUSE_AVIF=OFF 
                -DUSE_XCF=OFF 
                -DBUILD_CMSTEST=OFF 
                -DUSE_OPENEXR=OFF 
                -DBUILD_PRINT=OFF 
                -DBUILD_RS_IDENTIFY=OFF 
                -DUSE_LENSFUN=OFF 
                -DUSE_GMIC=OFF 
                -DUSE_LIBSECRET=OFF
            }
        include:
          - btype: Release
            compiler: { compiler: LLVM,  CC: clang,   CXX: clang++ }
            eco: { name: binpkg, defines: -DBINARY_PACKAGE_BUILD=ON }
          - btype: Debug
            compiler: { compiler: GNU,  CC: gcc,   CXX: g++ }
            eco: { name: normal, defines: "" }
    defaults:
      run:
        shell: msys2 {0}
    steps:
      - uses: actions/checkout@v2
        with:
          submodules: true
      - uses: msys2/setup-msys2@v2
        with:
          msystem: MINGW64
          install: >-
            pacman-mirrors
            bash
            curl
            git
            base-devel
            intltool
            mingw-w64-x86_64-toolchain
            mingw-w64-x86_64-gcc
            mingw-w64-x86_64-clang
            mingw-w64-x86_64-openmp
            mingw-w64-x86_64-cmake
            mingw-w64-x86_64-cmocka
            mingw-w64-x86_64-ninja
            mingw-w64-x86_64-libxml2
            mingw-w64-x86_64-pugixml
            mingw-w64-x86_64-libjpeg-turbo
            mingw-w64-x86_64-zlib
            mingw-w64-x86_64-exiv2
            mingw-w64-x86_64-lcms2
            mingw-w64-x86_64-lensfun
            mingw-w64-x86_64-dbus-glib
            mingw-w64-x86_64-openexr
            mingw-w64-x86_64-sqlite3
            mingw-w64-x86_64-libxslt
            mingw-w64-x86_64-libsoup
            mingw-w64-x86_64-libavif
            mingw-w64-x86_64-libwebp
            mingw-w64-x86_64-libsecret
            mingw-w64-x86_64-lua
            mingw-w64-x86_64-graphicsmagick
            mingw-w64-x86_64-openjpeg2
            mingw-w64-x86_64-gtk3
            mingw-w64-x86_64-pugixml
            mingw-w64-x86_64-libexif
            mingw-w64-x86_64-osm-gps-map
            mingw-w64-x86_64-libgphoto2
            mingw-w64-x86_64-drmingw
            mingw-w64-x86_64-gettext
            mingw-w64-x86_64-python3
            mingw-w64-x86_64-iso-codes
            mingw-w64-x86_64-python3-jsonschema
            mingw-w64-x86_64-python3-setuptools
            mingw-w64-x86_64-gmic
            mingw-w64-x86_64-nsis
          update: true
      - name: Build and Install
        env:
          CC: ${{ matrix.compiler.CC }}
          CXX: ${{ matrix.compiler.CXX }}
          SRC_DIR: ${{ github.workspace }}
          BUILD_DIR: ${{ github.workspace }}/build
          INSTALL_PREFIX: ${{ github.workspace }}/install
          ECO: ${{ matrix.eco.defines }}
          CMAKE_BUILD_TYPE: ${{ matrix.btype }}
          GENERATOR: "MSYS Makefiles"
          TARGET: notest
          # todo: use linker which supprots --wrap, ld.bfd and ld.gold support it
        run: |
          cmake -E make_directory "${BUILD_DIR}"
          cmake -E make_directory "${INSTALL_PREFIX}"
          $(cygpath ${SRC_DIR})/.ci/ci-script.sh
      - name: Package
        if: ${{ success() && matrix.btype == 'Release' && matrix.eco.name == 'binpkg' }}
        env:
          CC: ${{ matrix.compiler.CC }}
          CXX: ${{ matrix.compiler.CXX }}
          SRC_DIR: ${{ github.workspace }}
          BUILD_DIR: ${{ github.workspace }}/build
          INSTALL_PREFIX: ${{ github.workspace }}/install
          ECO: ${{ matrix.eco.defines }}
          CMAKE_BUILD_TYPE: ${{ matrix.btype }}
          GENERATOR: "MSYS Makefiles"
          TARGET: notest
        run: |
          lensfun-update-data
          cd "${BUILD_DIR}"
          cmake --build "${BUILD_DIR}" --target package
      - name: Package upload
        if: ${{ success() && matrix.btype == 'Release' && matrix.eco.name == 'binpkg' }}
        uses: 'actions/upload-artifact@v2'
        with:
          name: Win64.${{ matrix.compiler.compiler }}.${{ matrix.btype}}.${{ github.sha }}
          path: ${{ github.workspace }}/build/darktable-*.exe
          retention-days: 1

  macOS:
    name: ${{ matrix.os }}.${{ matrix.compiler.compiler }}.${{ matrix.btype }}
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ macos-latest ]
        compiler:
          - { compiler: XCode,   CC: cc, CXX: c++ }
        btype: [ RelWithDebInfo ]
    steps:
      - uses: actions/checkout@v2
        with:
          submodules: true
      - name: Install Base Dependencies
        run: |
          brew update > /dev/null || true
          brew tap Homebrew/bundle
          cd .ci
          brew bundle --verbose
      - name: Build and Install
        env:
          CC: ${{ matrix.compiler.CC }}
          CXX: ${{ matrix.compiler.CXX }}
          SRC_DIR: ${{ github.workspace }}
          BUILD_DIR: ${{ github.workspace }}/build
          INSTALL_PREFIX: ${{ github.workspace }}/install
          CMAKE_BUILD_TYPE: ${{ matrix.btype }}
          GENERATOR: Ninja
          TARGET: notest
          # todo: use linker which supprots --wrap, ld.bfd and ld.gold support it
        run: |
          cmake -E make_directory "${BUILD_DIR}";
          cmake -E make_directory "${INSTALL_PREFIX}";
          ./.ci/ci-script.sh;