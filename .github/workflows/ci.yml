name: CI

on:
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]

jobs:
  windows-msys2:
    name: ${{ matrix.os }}.${{ matrix.compiler.compiler }}.${{ matrix.generator }}
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ windows-latest ]
        msys2:
          - { msystem: MINGW64, arch: x86_64 }
        compiler:
          - { compiler: GNU,  CC: gcc,   CXX: g++ }
          - { compiler: LLVM, CC: clang, CXX: clang++ }
        btype: [ RelWithDebInfo ]
        generator: [ Ninja, "MSYS Makefiles" ]
    defaults:
      run:
        shell: msys2 {0}
    steps:
      - uses: actions/checkout@v2
        with:
          submodules: true
      - uses: msys2/setup-msys2@v2
        with:
          msystem: ${{ matrix.msys2.msystem }}
          install: >-
            pacman-mirrors
            bash
            curl
            git
            base-devel
            intltool
            mingw-w64-${{ matrix.msys2.arch }}-toolchain
            mingw-w64-${{ matrix.msys2.arch }}-gcc
            mingw-w64-${{ matrix.msys2.arch }}-clang
            mingw-w64-${{ matrix.msys2.arch }}-openmp
            mingw-w64-${{ matrix.msys2.arch }}-cmake
            mingw-w64-${{ matrix.msys2.arch }}-cmocka
            mingw-w64-${{ matrix.msys2.arch }}-ninja
            mingw-w64-${{ matrix.msys2.arch }}-libxml2
            mingw-w64-${{ matrix.msys2.arch }}-pugixml
            mingw-w64-${{ matrix.msys2.arch }}-libjpeg-turbo
            mingw-w64-${{ matrix.msys2.arch }}-zlib
            mingw-w64-${{ matrix.msys2.arch }}-exiv2
            mingw-w64-${{ matrix.msys2.arch }}-lcms2
            mingw-w64-${{ matrix.msys2.arch }}-dbus-glib
            mingw-w64-${{ matrix.msys2.arch }}-openexr
            mingw-w64-${{ matrix.msys2.arch }}-sqlite3
            mingw-w64-${{ matrix.msys2.arch }}-libxslt
            mingw-w64-${{ matrix.msys2.arch }}-libsoup
            mingw-w64-${{ matrix.msys2.arch }}-libavif
            mingw-w64-${{ matrix.msys2.arch }}-libwebp
            mingw-w64-${{ matrix.msys2.arch }}-libsecret
            mingw-w64-${{ matrix.msys2.arch }}-lua
            mingw-w64-${{ matrix.msys2.arch }}-graphicsmagick
            mingw-w64-${{ matrix.msys2.arch }}-openjpeg2
            mingw-w64-${{ matrix.msys2.arch }}-gtk3
            mingw-w64-${{ matrix.msys2.arch }}-pugixml
            mingw-w64-${{ matrix.msys2.arch }}-libexif
            mingw-w64-${{ matrix.msys2.arch }}-osm-gps-map
            mingw-w64-${{ matrix.msys2.arch }}-libgphoto2
            mingw-w64-${{ matrix.msys2.arch }}-drmingw
            mingw-w64-${{ matrix.msys2.arch }}-gettext
            mingw-w64-${{ matrix.msys2.arch }}-python3
            mingw-w64-${{ matrix.msys2.arch }}-iso-codes 
          update: true
      - name: Build and Install
        env:
          CC: ${{ matrix.compiler.CC }}
          CXX: ${{ matrix.compiler.CXX }}
          SRC_DIR: ${{ github.workspace }}
          BUILD_DIR: ${{ github.workspace }}/build
          INSTALL_PREFIX: ${{ github.workspace }}/install
          #ECO: -DALLOW_DOWNLOADING_GOOGLETEST=ON
          CMAKE_BUILD_TYPE: ${{ matrix.btype }}
          GENERATOR: ${{ matrix.generator }}
          TARGET: notest
          VERBOSE: "-v"
          MAKEFLAGS: "-j2 ${VERBOSE}"
          KEEPGOING: "-k0"
          # todo: use linker which supprots --wrap, ld.bfd and ld.gold support it
        run: |
          cmake -E make_directory "${BUILD_DIR}"
          cmake -E make_directory "${INSTALL_PREFIX}"
          cd "${BUILD_DIR}"
          cmake -DCMAKE_INSTALL_PREFIX="${INSTALL_PREFIX}" -G"${GENERATOR}" -DCMAKE_BUILD_TYPE="${CMAKE_BUILD_TYPE}" "${ECO}" "${SRC_DIR}"
          cmake --build "${BUILD_DIR}" -- ${MAKEFLAGS} || cmake --build "${BUILD_DIR}" -- -j1 "${VERBOSE}" "${KEEPGOING}"
          cmake --build "${BUILD_DIR}" --target install -- ${MAKEFLAGS} || cmake --build "${BUILD_DIR}" --target install -- -j1 "${VERBOSE}" "${KEEPGOING}"
        # $(cygpath ${SRC_DIR})/.ci/ci-script.sh
  macOS:
    name: ${{ matrix.os }}.${{ matrix.compiler.compiler }}.${{ matrix.btype }}
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ macos-latest ]
        compiler:
          - { compiler: XCode,   CC: cc, CXX: c++ }
        btype: [ RelWithDebInfo ]
    steps:
      - uses: actions/checkout@v2
        with:
          submodules: true
      - name: Install Base Dependencies
        run: |
          brew update > /dev/null || true
          brew tap Homebrew/bundle
          cd .ci
          brew bundle --verbose
      - name: Build and Install
        env:
          CC: ${{ matrix.compiler.CC }}
          CXX: ${{ matrix.compiler.CXX }}
          SRC_DIR: ${{ github.workspace }}
          BUILD_DIR: ${{ github.workspace }}/build
          INSTALL_PREFIX: ${{ github.workspace }}/install
          CMAKE_BUILD_TYPE: ${{ matrix.btype }}
          GENERATOR: Ninja
          TARGET: notest
          # todo: use linker which supprots --wrap, ld.bfd and ld.gold support it
        run: |
          cmake -E make_directory "${BUILD_DIR}";
          cmake -E make_directory "${INSTALL_PREFIX}";
          ./.ci/ci-script.sh;