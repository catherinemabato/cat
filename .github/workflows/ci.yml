name: CI

on:
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]

jobs:
  Win64:
    if: ${{ false }}
    name: Win64.${{ matrix.compiler.compiler }}.${{ matrix.target }}.${{ matrix.btype }}
    runs-on: windows-latest
    strategy:
      fail-fast: true
      matrix:
        btype:
          - RelWithDebInfo
        compiler:
          - { compiler: GNU,  CC: gcc,   CXX: g++ }
          - { compiler: LLVM, CC: clang, CXX: clang++ }
        target:
          - skiptest
          - nofeatures
        #Release works on GNU & LLVM, Debug only on GNU. todo: use if to exclude
        include:
          # Uncomment if PR needs to generate windows package for testing.
          #- btype: Release
          #  compiler: { compiler: LLVM,  CC: clang,   CXX: clang++ }
          #  eco: -DBINARY_PACKAGE_BUILD=ON
          #  target: skiptest
          - btype: Debug
            compiler: { compiler: GNU,  CC: gcc,   CXX: g++ }
            target: skiptest
    defaults:
      run:
        shell: msys2 {0}
    env:
      CC: ${{ matrix.compiler.CC }}
      CXX: ${{ matrix.compiler.CXX }}
      SRC_DIR: ${{ github.workspace }}/src
      BUILD_DIR: ${{ github.workspace }}/build
      INSTALL_PREFIX: ${{ github.workspace }}/install
      ECO: ${{ matrix.eco }}
      CMAKE_BUILD_TYPE: ${{ matrix.btype }}
      GENERATOR: 'MSYS Makefiles'
      TARGET: ${{ matrix.target }}
      # todo: use linker which supprots --wrap, ld.bfd and ld.gold support it
    steps:
      - uses: actions/checkout@v2
        with:
          submodules: true
          path: src
      - uses: msys2/setup-msys2@v2
        with:
          msystem: MINGW64
          install: >-
            pacman-mirrors
            bash
            curl
            git
            base-devel
            intltool
            mingw-w64-x86_64-toolchain
            mingw-w64-x86_64-gcc
            mingw-w64-x86_64-clang
            mingw-w64-x86_64-openmp
            mingw-w64-x86_64-cmake
            mingw-w64-x86_64-cmocka
            mingw-w64-x86_64-ninja
            mingw-w64-x86_64-libxml2
            mingw-w64-x86_64-pugixml
            mingw-w64-x86_64-libjpeg-turbo
            mingw-w64-x86_64-zlib
            mingw-w64-x86_64-exiv2
            mingw-w64-x86_64-lcms2
            mingw-w64-x86_64-lensfun
            mingw-w64-x86_64-dbus-glib
            mingw-w64-x86_64-openexr
            mingw-w64-x86_64-sqlite3
            mingw-w64-x86_64-libxslt
            mingw-w64-x86_64-libsoup
            mingw-w64-x86_64-libavif
            mingw-w64-x86_64-libwebp
            mingw-w64-x86_64-libsecret
            mingw-w64-x86_64-lua
            mingw-w64-x86_64-graphicsmagick
            mingw-w64-x86_64-openjpeg2
            mingw-w64-x86_64-gtk3
            mingw-w64-x86_64-pugixml
            mingw-w64-x86_64-libexif
            mingw-w64-x86_64-osm-gps-map
            mingw-w64-x86_64-libgphoto2
            mingw-w64-x86_64-drmingw
            mingw-w64-x86_64-gettext
            mingw-w64-x86_64-python3
            mingw-w64-x86_64-iso-codes
            mingw-w64-x86_64-python3-jsonschema
            mingw-w64-x86_64-python3-setuptools
            mingw-w64-x86_64-gmic
            mingw-w64-x86_64-nsis
          update: true
      - name: Build and Install
        run: |
          cmake -E make_directory "${BUILD_DIR}"
          cmake -E make_directory "${INSTALL_PREFIX}"
          $(cygpath ${SRC_DIR})/.ci/ci-script.sh
      - name: Check if it runs
        run: |
          $(cygpath ${INSTALL_PREFIX})/bin/darktable.exe --version || true
          $(cygpath ${INSTALL_PREFIX})/bin/darktable-cli.exe \
                 --width 2048 --height 2048 \
                 --hq true --apply-custom-presets false \
                 $(cygpath ${SRC_DIR})/src/tests/integration/images/mire1.cr2 \
                 $(cygpath ${SRC_DIR})/src/tests/integration/0000-nop/nop.xmp \
                 output.png \
                 --core --disable-opencl --conf host_memory_limit=8192 \
                 --conf worker_threads=4 -t 4 \
                 --conf plugins/lighttable/export/force_lcms2=FALSE \
                 --conf plugins/lighttable/export/iccintent=0
      - name: Package
        if: ${{ success() && matrix.btype == 'Release' && matrix.target == 'skiptest' }}
        run: |
          lensfun-update-data
          cd "${BUILD_DIR}"
          cmake --build "${BUILD_DIR}" --target package
      - name: Package upload
        if: ${{ success() && matrix.btype == 'Release' && matrix.target == 'skiptest' }}
        uses: 'actions/upload-artifact@v2'
        with:
          name: Win64.${{ matrix.compiler.compiler }}.${{ matrix.btype}}.${{ github.sha }}
          path: ${{ env.BUILD_DIR }}/darktable-*.exe
          retention-days: 1

  macOS:
    if: ${{ false }}
    name: macOS.${{ matrix.compiler.compiler }}.${{ matrix.target }}
    runs-on: macos-latest
    strategy:
      fail-fast: true
      matrix:
        compiler:
          - { compiler: XCode,   CC: cc, CXX: c++ }
        btype: [ RelWithDebInfo ]
        target:
          - skiptest
          - nofeatures
    env:
      CC: ${{ matrix.compiler.CC }}
      CXX: ${{ matrix.compiler.CXX }}
      SRC_DIR: ${{ github.workspace }}/src
      BUILD_DIR: ${{ github.workspace }}/build
      INSTALL_PREFIX: ${{ github.workspace }}/install
      CMAKE_BUILD_TYPE: ${{ matrix.btype }}
      GENERATOR: Ninja
      TARGET: ${{ matrix.target }}
    steps:
      - uses: actions/checkout@v2
        with:
          submodules: true
          path: src
      - name: Install Base Dependencies
        run: |
          brew update > /dev/null || true
          brew tap Homebrew/bundle
          cd src/.ci
          brew bundle --verbose
      - name: Build and Install
          # todo: use linker which supprots --wrap, ld.bfd and ld.gold support it
        run: |
          cmake -E make_directory "${BUILD_DIR}";
          cmake -E make_directory "${INSTALL_PREFIX}";
          ./src/.ci/ci-script.sh;
      - name: Check if it runs
        run: |
          ${INSTALL_PREFIX}/bin/darktable --version || true
          ${INSTALL_PREFIX}/bin/darktable-cli \
                 --width 2048 --height 2048 \
                 --hq true --apply-custom-presets false \
                 "${SRC_DIR}/src/tests/integration/images/mire1.cr2" \
                 "${SRC_DIR}/src/tests/integration/0000-nop/nop.xmp" \
                 output.png \
                 --core --disable-opencl --conf host_memory_limit=8192 \
                 --conf worker_threads=4 -t 4 \
                 --conf plugins/lighttable/export/force_lcms2=FALSE \
                 --conf plugins/lighttable/export/iccintent=0
  Linux:
    name: ${{ matrix.os }}.${{ matrix.compiler.compiler }}.${{ matrix.target }}
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: true
      matrix:
        os: 
          - ubuntu-latest
        compiler:
          - { compiler: GNU8,  CC: gcc-8,   CXX: g++-8, packages: gcc-8 g++-8 }
          - { compiler: GNU9,  CC: gcc-9,   CXX: g++-9, packages: gcc-9 g++-9 }
          - { compiler: GNU10,  CC: gcc-10,   CXX: g++-10, packages: gcc-10 g++-10 }
          #- { compiler: LLVM, CC: clang, CXX: clang++ }
        btype: [ RelWithDebInfo ]
        target:
          - build
          #- nofeatures
    env:
      CC: ${{ matrix.compiler.CC }}
      CXX: ${{ matrix.compiler.CXX }}
      SRC_DIR: ${{ github.workspace }}/src
      BUILD_DIR: ${{ github.workspace }}/build
      INSTALL_PREFIX: ${{ github.workspace }}/install
      CMAKE_BUILD_TYPE: ${{ matrix.btype }}
      GENERATOR: Ninja
      TARGET: ${{ matrix.target }}
    steps:
      - uses: actions/checkout@v2
        with:
          submodules: true
          path: src
      - name: Install compiler ${{ matrix.compiler.compiler }}
        run: |
          sudo add-apt-repository ppa:ubuntu-toolchain-r/test
          sudo apt-get update
          sudo apt-get -y install \
            ${{ matrix.compiler.packages }}
      - name: Install Base Dependencies
        run: |
          sudo apt-get -y install \
            build-essential \
            appstream-util \
            desktop-file-utils \
            gettext \
            git \
            intltool \
            libatk1.0-dev \
            libcairo2-dev \
            libcolord-dev \
            libcolord-gtk-dev \
            libcmocka-dev \
            libcups2-dev \
            libcurl4-gnutls-dev \
            libexiv2-dev \
            libflickcurl-dev \
            libgdk-pixbuf2.0-dev \
            libglib2.0-dev \
            libgphoto2-dev \
            libgraphicsmagick1-dev \
            libgtk-3-dev \
            libjpeg-dev \
            libjson-glib-dev \
            liblcms2-dev \
            liblensfun-dev \
            liblua5.2-dev \
            liblua5.3-dev \
            libopenexr-dev \
            libopenjp2-7-dev \
            libosmgpsmap-1.0-dev \
            libpango1.0-dev \
            libpng-dev \
            libpugixml-dev \
            librsvg2-dev \
            libsaxon-java \
            libsecret-1-dev \
            libsoup2.4-dev \
            libsqlite3-dev \
            libtiff5-dev \
            libwebp-dev \
            libx11-dev \
            libxml2-dev \
            libxml2-utils \
            ninja-build \
            perl \
            po4a \
            python3-jsonschema \
            xsltproc \
            zlib1g-dev;