<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE topic PUBLIC "-//OASIS//DTD DITA Topic//EN"
"topic.dtd">
<topic id="darktable_and_memory_64bit" xml:lang="en-us">
  <title>darktable on 64-bit systems</title>
  <prolog>
    <metadata>
      <keywords>
        <indexterm>memory setup
        <indexterm>64-bit systems</indexterm></indexterm>
      </keywords>
    </metadata>
  </prolog>
  <body>
    <p>There's not much to be said here. Of course also 64-bit systems require a sufficient amount of main memory, so the 4GB plus swap recommendation holds true. On the other hand, 64-bit architectures do not suffer from the specific 32-bit limitations like small address space and fragmentation madness.</p>
    <p>Most modern Intel or AMD 64-bit CPUs will have available address space in the range of several Terabytes. The word 
    <q>modern</q>is relative in this context: all AMD and Intel CPUs introduced since 2003 and 2004, respectively, offer a 64-bit mode. Linux 64-bit has been available for many years.</p>
    <p>All relevant Linux distributions give you the choice to install a 32-bit or a 64-bit version with no added costs. You can even run old 32-bit binaries on a 64-bit Linux. The only thing you need to do: invest some time into the migration. In the end we strongly recommend moving to a 64-bit version of Linux. There really is no reason not to upgrade to 64-bit.</p>
    <p>On a 64-bit system you can safely leave the tiling related configuration parameters at their defaults: 
    <q>host memory limit (in MB) for tiling</q>should have a value of 1500 and 
    <q>minimum amount of memory (in MB) for a single buffer in tiling</q>should be set to 16. In case you are migrating from a 32-bit to a 64-bit system you will need to check these settings and manually change them if needed in darktable's preference dialog.</p>
    <p>Typically there is no need to restrict oneself in the number of background threads on a 64-bit system. On a multi-processor system a number of two to eight threads can speed up thumbnail generation considerably versus only one thread. The reason is not so much taking maximum advantage of all your CPU cores – darktable's pixelpipe anyhow uses all of them in parallel – but hiding I/O latency.</p>
    <p>One exception is worth to be mentioned. If you use darktable to process 
    <indexterm>stitched panoramas</indexterm>, e.g. TIFFs as generated by Hugin, these images can reach considerable sizes. Each background thread needs to allocate enough memory to keep one full image plus intermediates and output in its buffers. This may quickly run even a well equipped 64-bit system out of memory. In that case lower the number of background threads to only one.</p>
  </body>
</topic>
