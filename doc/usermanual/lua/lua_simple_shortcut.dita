<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE topic PUBLIC "-//OASIS//DTD DITA Topic//EN"
"topic.dtd">
<topic id="lua_simple_shortcut" xml:lang="en-us">
  <title>Adding a simple shortcut</title>
  <body>
    <p>So far, all our scripts have done things during startup. This is of limited use and doesn't allow us to react to real user actions. To do more advanced things we need to register a function that will be called on a given event. The most common event to react to is a keyboard shortcut.</p>
    <pre xml:space="preserve">
darktable = require "darktable"

local function hello_shortcut(event, shortcut)
darktable.print("Hello, I just received '"..event..
       "' with parameter '"..shortcut.."'")
end

darktable.register_event("shortcut",hello_shortcut,
       "A shortcut that print its parameters")
      
</pre>
    <p>Now start darktable, go to 
    <codeph>preferences =&gt; shortcut =&gt; lua =&gt; A shortcut that print its parameters</codeph>assign a shortcut and try it. You should have a nice message printed on the screen.</p>
    <p>Let's look at the code in details. We first define a function with two parameters. These parameters are strings. The first one is the type of event that is triggered ( 
    <codeph>"shortcut"</codeph>) and the second one is what shortcut specifically ( 
    <codeph>"A shortcut that print its parameters"</codeph>). The function itself calls 
    <codeph>darktable.print</codeph>that will print the message as an overlay in the main window.</p>
    <p>Once that function is defined, we register it as a shortcut callback. To do that we call 
    <codeph>darktable.register_event</codeph>which is a generic function for all types of events. We tell it that we are registering a shortcut event, then we give the callback to call and last, we give the string to use to describe the shortcut in the preference window.</p>
    <p>Let's try a shortcut a little more interactive. This one will look at the images the user is currently interested in (selected or moused-over) and will increase their rating.</p>
    <p>
      <pre xml:space="preserve">
darktable = require "darktable"

darktable.register_event("shortcut",function(event,shortcut)
    local images = darktable.gui.action_images
    for _,v in pairs(images) do
      v.rating = v.rating + 1
    end
  end,"Increase the rating of an image")
      
</pre>
    </p>
    <p>At this point, most of this code should be self explanatory. Just a couple of notes: 
    <ul>
      <li>Instead of declaring a function and referencing it, we declare it directly in the call to 
      <codeph>darktable.register_event</codeph>this is strictly equivalent but slightly more compact.</li>
      <li>
      <codeph>image.rating</codeph>is a field of any image that gives its rating (between 0 and 5 stars, -1 means rejected).</li>
      <li>
      <codeph>darktable.gui.action_images</codeph>is a table containing all the images of interest. darktable will act on selected images if any image is selected, and on the image under the mouse if no image is selected. This function allows to easily follow darktable's UI logic in lua.</li>
    </ul></p>
    <p>If you select an image and press your shortcut a couple of time, it will work correctly at first but when you have reached five stars, darktable will start showing the following error on the console:</p>
    <p>
      <codeblock xml:space="preserve">


LUA ERROR : rating too high : 6
stack traceback:
        [C]: in ?
        [C]: in function '__newindex'
  ./configdir/luarc:10: in function &lt;./configdir/luarc:7&gt;
      LUA ERROR : rating too high : 6
  

          
</codeblock>
    </p>
    <p>This is lua's way of reporting errors. We have attempted to set a rating of 6 to an image, but a rating can only go as high as 5. It would be trivial to add a check, but let's go the complicated way and catch the error instead.</p>
    <p>
      <pre xml:space="preserve">
darktable.register_event("shortcut",function(event,shortcut)
    local images = darktable.gui.action_images
    for _,v in pairs(images) do
      result,message = pcall(function()
        v.rating = v.rating + 1
        end)
      if not result then
        darktable.print_error("could not increase rating of image "..
          tostring(v).." : "..message)
      end
    end
end,"Increase the rating of an image")
</pre>
    </p>
    <p>
    <codeph>pcall</codeph>will run its first argument and catch any exception thrown by it. If there is no exception it will return 
    <codeph>true</codeph>plus any result returned by the function; if there is an exception it will return 
    <codeph>false</codeph>and the error message of the exception. We simply test these results and print them on the console...</p>
  </body>
</topic>
