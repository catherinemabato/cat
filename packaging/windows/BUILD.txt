For Windows darktable is built using MSYS2 in the following manner.

    Install MSYS2 (instructions and prerequisites can be found on official website: https://msys2.github.io/).
    Update the base MSYS2 system until no further updates are available using:
	$ pacman -Syu

    From MSYS2 terminal, install x64 developer tools and x86_64 toolchain and git from the MSYS2 prompt:
	$ pacman -S base-devel
	$ pacman -S mingw-w64-x86_64-{toolchain,cmake,nsis}
	$ pacman -S git

    Install required libraries and dependencies:
	$ pacman -S mingw-w64-x86_64-{exiv2,lcms2,lensfun,dbus-glib,openexr,sqlite3,libxslt,libsoup,libavif,libwebp,libsecret,lua,graphicsmagick,openjpeg2,gtk3,pugixml,libexif,osm-gps-map,libgphoto2,flickcurl,drmingw,gettext,python3,iso-codes,python3-jsonschema,python3-setuptools}

    Install optional libraries and dependencies:
  $ pacman -S mingw-w64-x86_64-gmic

    Note: GMIC. Waiting for GMIC 9.3 you may need to rename libopencv_core4xx and libopencv_videoio4xx
  to libopencv_core440 and libopencv_videoio440 in the bin folder of darktable to get lut3d available.

    For gphoto2:
    You need to restart the MINGW64 or MSYS terminal to have CAMLIBS and IOLIBS environment variables properly set for LIBGPHOTO are available. Also make sure they aren't pointing into your normal windows installation in case you already have darktable installed. You can check them with:
	$ echo $CAMLIBS
	$ echo $IOLIBS
    If you have to set them manually you can do so by setting the variables in your .bash_profile. Example:
	export CAMLIBS="/mingw64/lib/libgphoto2/2.5.23/"
	export IOLIBS="/mingw64/lib/libgphoto2_port/0.12.0/"

 	From MINGW64 terminal, update your lensfun database:
	$ lensfun-update-data

    Also use this program to install USB driver on Windows for your camera:
    http://zadig.akeo.ie/
    When you run it, replace current Windows camera driver with WinUSB driver

   
    Modify your bash_profile file in your HOME directory and add the following lines:
    # Added as per http://wiki.gimp.org/wiki/Hacking:Building/Windows
    export PREFIX="/mingw64"
    export LD_LIBRARY_PATH="$PREFIX/lib:$LD_LIBRARY_PATH"
    export PATH="$PREFIX/bin:$PATH"

   By default cmake will only use one core during the build process.  To speed things up you might wish to add a line like:
   	export CMAKE_BUILD_PARALLEL_LEVEL="6"
   to your .bash_profile file. This would use 6 cores.
   
    Execute the following command to actviate profile changes
	$ . .bash_profile

    From MINGW64 terminal, clone darktable git repository (in this example into ~/darktable):
        $ cd ~
        $ git clone git://github.com/darktable-org/darktable.git
        $ cd darktable
        $ git submodule init
        $ git submodule update

    Finally build and install darktable:
        $ mkdir build
        $ cd build
        $ cmake -G "MSYS Makefiles" -DCMAKE_BUILD_TYPE=Release -DCMAKE_INSTALL_PREFIX=/opt/darktable ../.
        $ cmake --build .
        $ cmake --build . --target install

    After this darktable will be installed in /opt/darktable directory and can be started by typing /opt/darktable/bin/darktable.exe in MSYS2 MINGW64 terminal.
    NOTE: If you are using the Lua scripts, build the installer and install darktable.  The Lua scripts check the operating system and see windows and expect a
          windows shell when executing system commands. Running darktable from the MSYS2 MINGW64 terminal gives a bash shell and therefore the commands will not 
          work.

    For building the installer image, which will  create darktable-<VERSION>.exe installer in current build directory, use:
        $ cmake --build . --target package
	NOTE: The package created will be optimized for the machine on which it has been built, but it could not run on other PCs with different hardware or different Windows version. If you want to create a "generic" package, change the first cmake command line as follows:
		$ cmake -G "MSYS Makefiles" -DCMAKE_BUILD_TYPE=Release -DCMAKE_INSTALL_PREFIX=/opt/darktable -DBINARY_PACKAGE_BUILD=ON ../.


