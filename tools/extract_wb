#!/usr/bin/env ruby

if ARGV.size < 1
  $stderr.puts "Usage: extract_wb <file1> [file2] ..."
  exit 2
end

# Presets we just skip
IGNORED_PRESETS=["Auto","Kelvin","Measured","AsShot","Kelvin","Preset",
                 "Multi Auto", "Color Temperature Enhancement", "Custom",
                 "One Touch WB 1", "One Touch WB 2", "One Touch WB 3",
                 "One Touch WB 4", "Custom WB 1", "Auto0", "Auto1", "Auto2",
                 "CWB1", "CWB2", "CWB3", "CWB4", "Black", "Illuminator1",
                 "Illuminator2", "Uncorrected"]
# Preset names we adjust
FL_PRESET_REPLACE={
  "Fluorescent" => "CoolWhiteFluorescent",
  "FluorescentP1" => "DayWhiteFluorescent",
  "FluorescentP2" => "DaylightFluorescent",
  "FluorescentM1" => "WarmWhiteFluorescent",
  "FluorescentD"  => "DaylightFluorescent",
  "FluorescentN"  => "NeutralFluorescent",
  "FluorescentW"  => "WhiteFluorescent",
  "Daylight Fluorescent" => "DaylightFluorescent",
  "Day White Fluorescent" => "DayWhiteFluorescent",
  "White Fluorescent" => "WhiteFluorescent",
  "Unknown (0x600)" => "Underwater",
  "Sunny" => "DirectSunlight",
  "Fine Weather" => "DirectSunlight",
  "Tungsten (Incandescent)" => "Tungsten",
  "Cool WHT FL" => "CoolWhiteFluorescent",
  "Daylight FL" => "DaylightFluorescent",
  "Warm WHT FL" => "WarmWhiteFluorescent",
  "Warm White Fluorescent" => "WarmWhiteFluorescent",
  "White FL" => "WhiteFluorescent",
  "Mercury Lamp" => "HighTempMercuryVaporFluorescent",
  "Day White FL" => "DayWhiteFluorescent",
  "Sodium Lamp" => "SodiumVaporFluorescent",
  "3000K (Tungsten light)" => "Tungsten",
  "4000K (Cool white fluorescent)" => "CoolWhiteFluorescent",
  "5300K (Fine Weather)" => "Daylight",
  "5500K (Flash)" => "Flash",
  "6000K (Cloudy)" => "Cloudy",
  "7500K (Fine Weather with Shade)" => "Shade",
}
PRESET_ORDER=["DirectSunlight", "Daylight", "D55", "Shade","Cloudy",
              "Tungsten", "ISO Studio Tungsten", "Incandescent","Fluorescent", 
              "WarmWhiteFluorescent", "CoolWhiteFluorescent",
              "DayWhiteFluorescent","DaylightFluorescent",
              "DaylightFluorescent", "NeutralFluorescent", "WhiteFluorescent",
              "HighTempMercuryVaporFluorescent", "HTMercury", 
              "SodiumVaporFluorescent", "Underwater", "Flash", "Unknown"]

PRESET_SORT_MAPPING={}
PRESET_ORDER.each_with_index {|name, index| PRESET_SORT_MAPPING[name]=index+1}

CAMERAS=File.expand_path("../src/external/rawspeed/data/cameras.xml", File.dirname(__FILE__))

# Create a map between EXIF maker/model and our cleaned up maker/model
require 'nokogiri'
exif_name_map = {}
File.open(CAMERAS) do |f|
  xml_doc  = Nokogiri::XML(f)
  xml_doc.css("Camera").each do |c|
    maker = exif_maker = c.attribute("make").value
    model = exif_model = c.attribute("model").value
    exif_id = [maker,model]
    if c.css("ID")[0]
      maker = c.css("ID")[0].attribute("make").value
      model = c.css("ID")[0].attribute("model").value
    end
    exif_name_map[exif_id] = [maker,model]
    c.css("Alias").each do |a|
      exif_model = a.content
      exif_id = [exif_maker, exif_model]
      exif_name_map[exif_id] = [maker, model]
    end
  end
end

found_presets = []
ARGV.each do |filename|
  red = green = blue = maker = model = preset = nil
  finetune = 0
  listed_presets = []
  preset_names = {}
  fl_count = 0
  gm_skew = false;
  command = "exiftool -Make -Model \"-WBType*\" \"-WB_*\" \"-ColorTemp*\"    "\
    "-WhiteBalance -WhiteBalance2 -WhitePoint -ColorCompensationFilter       "\
    "-WBShiftAB -WBShiftAB_GM -WBShiftAB_GM_Precise -WBShiftGM -WBScale      "\
    "-WhiteBalanceFineTune -WhiteBalanceComp -WhiteBalanceSetting            "\
    "-WhiteBalanceBracket -WhiteBalanceBias -WBMode -WhiteBalanceMode        "\
    "-WhiteBalanceTemperature -WhiteBalanceDetected -ColorTemperature        "\
    "-WBShiftIntelligentAuto -WBShiftCreativeControl -WhiteBalanceSetup      "\
    "-WBRedLevel -WBBlueLevel -WBGreenLevel -RedBalance -BlueBalance         "\
    "\"#{filename}\""
  if filename.end_with? ".txt"
    command = "cat \"#{filename}\""
  end
  IO.popen(command) do |io|
    rlevel = blevel = glevel = 0
    while !io.eof?
      lineparts = io.readline.split(":")
      tag = lineparts[0].strip
      values = lineparts[1].strip.split(" ")
    
      if tag.split.include? "Make"
        maker = lineparts[1].strip
      elsif tag.split.include? "Model"
        model = lineparts[1].strip
      elsif tag == "WB RGGB Levels"
        green = (values[1].to_f+values[2].to_f)/2.0
        red = values[0].to_f/green
        blue = values[3].to_f/green
        green = 1
      elsif tag == "WB RB Levels"
        red = values[0].to_f
        blue = values[1].to_f
        if values.size == 4 && values[2] == "256" && values[3] == "256"
          red /= 256.0
          blue /= 256.0
        end
        green = 1
      elsif tag == "WB GRB Levels"
        green = values[0].to_f
        red = values[1].to_f/green
        blue = values[2].to_f/green
        green = 1
      # elsif tag == "WB GRB Levels Auto" && maker == "FUJIFILM" # fuji seems to use "WB GRB Levels Auto to describe manual finetuning
      #  green = values[0].to_f
      #  red = values[1].to_f/green
      #  blue = values[2].to_f/green
      #  green = 1
      elsif tag == "White Point" && values.length > 3
        green = (values[1].to_f+values[2].to_f)/2.0
        red = values[0].to_f/green
        blue = values[3].to_f/green
        green = 1
      elsif tag == "White Balance" || tag == "White Balance 2"
        preset = values.join(" ")
        preset = FL_PRESET_REPLACE[preset] if FL_PRESET_REPLACE[preset]
      elsif tag.split[0..1].join(" ") == "WB Type"
        preset_names[tag.split[2..-1].join] = values.join(" ");
      elsif ["WB RGB Levels", "WB RGGB Levels"].include? tag.split[0..2].join(" ")
        p = tag.split[3..-1].join
        
        if preset_names.has_key?(p)
          p = preset_names[p];
        end

        r=g=b=0
        if values.size == 4
          g = (values[1].to_f+values[2].to_f)/2.0
          r = values[0].to_f/g
          b = values[3].to_f/g
          g = 1
        elsif values.size == 3
          g = values[1].to_f
          r = values[0].to_f/g
          b = values[2].to_f/g
          g = 1
        else
          $stderr.puts "Found RGB tag '#{p}' with #{values.size} values instead of 3 or 4"
        end
        fl_count += 1 if p[0..."Fluorescent".size] == "Fluorescent"
        p = "Unknown" if !p || p==""
        listed_presets << [p,r,g,b]
      elsif ["WB RB Levels"].include? tag.split[0..2].join(" ")
        p = tag.split[3..-1].join
        
        if preset_names.has_key?(p)
          p = preset_names[p];
        end

        r=g=b=0
        if values.size == 4
          g = (values[2].to_f+values[3].to_f)/2.0
          r = values[0].to_f/g
          b = values[1].to_f/g
          g = 1
        elsif values.size == 2
          r = values[0].to_f
          b = values[2].to_f
          g = 1
        else
          $stderr.puts "Found RB tag '#{p}' with #{values.size} values instead of 2 or 4"
        end
        fl_count += 1 if p[0..."Fluorescent".size] == "Fluorescent"
        p = "Unknown" if !p || p==""
        listed_presets << [p,r,g,b]
      elsif tag == "WB Red Level"
        rlevel = values[0].to_f
      elsif tag == "WB Blue Level"
        blevel = values[0].to_f
      elsif tag == "WB Green Level"
        glevel = values[0].to_f
      elsif tag == "WB Shift AB" # canon - positive is towards amber, panasonic/leica/pentax - positive is towards blue?
        finetune = values[0]
      elsif tag == "WB Shift GM" # detect GM shift and warn about it
        gm_skew = gm_skew || (values[0].to_i != 0)
      elsif tag == "WB Shift AB GM" # sony
        finetune = values[0]
        gm_skew = gm_skew || (values[1].to_i != 0)
      elsif tag == "White Balance Fine Tune" && maker.start_with?("NIKON") # nikon
        finetune = 0-(values[0].to_i * 2) # nikon lies about half-steps (eg 6->6->5 instead of 6->5.5->5, need to address this later on, so rescalling this now)
        gm_skew = gm_skew || (values[1].to_i != 0)
      elsif tag == "White Balance Fine Tune" && maker == "FUJIFILM" # fuji
        $stderr.puts "Warning: Fuji does not seem to produce any sensible data for finetuning! If all finetuned values are identical, use one with no finetuning (0)"
        finetune = values[3].to_i / 20 # Fuji has -180..180 but steps are every 20
        gm_skew = gm_skew || (values[1].to_i != 0)
      elsif tag == "White Balance Bracket" # olympus
        finetune = values[0]
        gm_skew = gm_skew || (values[1].to_i != 0)
      elsif tag == "Color Compensation Filter" # minolta?
        gm_skew = gm_skew || (values[0].to_i != 0)
      end
    end
    if rlevel > 0 && glevel > 0 && blevel > 0
      red = rlevel/glevel
      blue = blevel/glevel
      green = 1
    end
  end

  if gm_skew
    $stderr.puts "WARNING: #{filename} has finetuning over GM axis! Data is skewed!"
  end

  # Adjust the maker/model we found with the map we generated before
  if exif_name_map[[maker,model]]
    maker, model = exif_name_map[[maker,model]]
  else
    $stderr.puts "WARNING: Couldn't find model in cameras.xml ('#{maker}', '#{model}')"
  end

  found_presets += listed_presets.map do |preset, red, green, blue|
    # ugly hack. Canon's Fluorescent is listed as WhiteFluorescent in usermanual
    if maker && maker == "Canon" && preset == "Fluorescent"
      preset = "WhiteFluorescent"
    end

    preset = FL_PRESET_REPLACE[preset] if FL_PRESET_REPLACE[preset]
    [maker, model, preset, "0", red, green, blue]
  end

  # Print out the WB value that was used in the file
  preset = "\"#{ARGV[0]}\"" if !preset
  if red && green && blue
    found_presets << [maker, model, preset, finetune.to_s, red, green, blue]
  end
end

#get rid of ignored presets (might speed up things later on?)
found_presets.reject! do |maker, model, preset, finetune, red, green, blue|
  IGNORED_PRESETS.include? preset
end

# $stderr.puts found_presets.inspect.gsub("], ", "],\n") # debug content
 
# Get rid of duplicate presets
found_presets = Hash[found_presets.sort.zip].keys

# $stderr.puts found_presets.inspect.gsub("], ", "],\n") # debug content

def convert_preset_to_sort(preset)
  if IGNORED_PRESETS.include? preset
    return 0
  elsif PRESET_SORT_MAPPING[preset]
    return PRESET_SORT_MAPPING[preset]
  elsif preset[-1] == "K"
    return preset[0..-2].to_i
  else
    $stderr.puts "WARNING: no defined sort order for '#{preset}'"
    return 0
  end
end

found_presets.sort! do |a, b|
  (convert_preset_to_sort(a[2]) <=> convert_preset_to_sort(b[2])) == 0 ? 
    a[3].to_i <=> b[3].to_i 
    : 
    (convert_preset_to_sort(a[2]) <=> convert_preset_to_sort(b[2]))
end

min_padding = 0
found_presets.each do |maker, model, preset, finetune, red, green, blue|
  min_padding = preset.size if preset.size > min_padding
end

 #dealing with Nikon half-steps
(found_presets.length - 1).times do |index|
  if found_presets[index][0] == "Nikon" && #case now translated
      found_presets[index+1][0] == found_presets[index][0] && ##
      found_presets[index+1][1] == found_presets[index][1] &&
      found_presets[index+1][2] == found_presets[index][2] &&
      found_presets[index+1][3] == found_presets[index][3]
      
    curr_finetune = found_presets[index][3].to_i
    if curr_finetune < 0 
      found_presets[index+1][3] = ((found_presets[index+1][3].to_i) + 1).to_s
    elsif curr_finetune > 0
      found_presets[index][3] = ((curr_finetune) - 1).to_s
    end
  end
end

# $stderr.puts found_presets.inspect.gsub("], ", "],\n") # debug content

# pack Nikon finetuning in case there were no half-steps 
(found_presets.length - 1).times do |index|
  if found_presets[index][0] == "Nikon" && #case now translated
      found_presets[index+1][0] == found_presets[index][0] && ##
      found_presets[index+1][1] == found_presets[index][1] &&
      found_presets[index+1][2] == found_presets[index][2] &&
      found_presets[index+1][3].to_i.even? && found_presets[index][3].to_i.even? &&
      (found_presets[index+1][3].to_i) == (found_presets[index][3].to_i + 2)
    
    #detected gap eg -12 -> -10. slicing in half to undo multiplication done earlier
    found_presets[index][3] = (found_presets[index][3].to_i / 2).to_s
    found_presets[index+1][3] = (found_presets[index+1][3].to_i / 2).to_s
  end
end
# $stderr.puts found_presets.inspect.gsub("], ", "],\n") # debug content

#detect lazy finetuning (will not complain if there's no finetuning)
lazy_finetuning = []
(found_presets.length - 1).times do |index|
  if found_presets[index+1][0] == found_presets[index][0] && ##
      found_presets[index+1][1] == found_presets[index][1] &&
      found_presets[index+1][2] == found_presets[index][2] &&
      found_presets[index+1][3].to_i != ((found_presets[index][3].to_i)+1)
      
    # found gap. complain about needing to interpolate
    lazy_finetuning << [found_presets[index][0], found_presets[index][1], found_presets[index][2]]
  end
end

# Get rid of duplicate lazy finetuning reports
lazy_finetuning = Hash[lazy_finetuning.sort.zip].keys

# $stderr.puts lazy_finetuning.inspect.gsub("], ", "],\n") # debug content

lazy_finetuning.each do |maker, model, preset|
  $stderr.puts "Gaps detected in finetuning for #{maker} #{model} preset #{preset}, dt will need to interpolate!"
end

# Print out the presets if they exist
found_presets.each do |maker, model, preset, finetune, red, green, blue|
  if IGNORED_PRESETS.include? preset
    $stderr.puts "Ignoring preset '#{preset}'"
  else
    preset = '"'+preset+'"' if preset[-1] == "K"
    preset = preset + " "*(min_padding-preset.size)
    puts "  { \"#{maker}\", \"#{model}\", #{preset}, #{finetune}, { #{red}, #{green}, #{blue}, 0 } },"
  end
end

# vim: tabstop=2 expandtab shiftwidth=2 softtabstop=2
# kate: tab-width: 2; replace-tabs on; indent-width 2; tab-indents: off;
# kate: indent-mode ruby; remove-trailing-spaces modified;
