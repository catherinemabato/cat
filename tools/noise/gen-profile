#!/bin/sh

set -e

scriptname=$(basename $0)
scriptdir=$(cd $(dirname $0) && pwd)

. "$scriptdir/subr.sh"

# --------------------------------------------------------------------
# Internal functions.
# --------------------------------------------------------------------

profile_image() {
	image="$1"
	presets="$2"
	files_list="$3"

	maker=$(get_image_camera_maker "$image")
	model=$(get_image_camera_model "$image")
	iso=$(get_image_iso "$image")

	xmp="$scriptdir/profiling-shot.xmp"
	noiseprofile="$scriptdir/noiseprofile"
	floatdump="$scriptdir/floatdump"

	echo
	echo "===> Profile image for \"$maker - $model - $iso ISO\""

	pfm="${image%.*}.pfm"
	if [ ! -f "$pfm" -o "$image" -nt "$pfm" -o "$xmp" -nt "$pfm" -o "$0" -nt "$pfm" ]; then
		echo "--> Converting $image (ISO $iso)"
		rm -f "$pfm"
		darktable-cli $image $xmp $pfm
	else
		echo "--> Skip $image (ISO $iso); output up-to-date"
	fi

	echo "--> Run noiseprofile"
	dat="${pfm%.pfm}.dat"
	$noiseprofile "$pfm" > "$dat"

	echo "--> Plotting $pfm"
	title="$maker, $model, $iso ISO ($(basename "${pfm%.pfm}"))"
	fit="${pfm%.pfm}.fit"
	pdf="${pfm%.pfm}.pdf"
	gnuplot 2>/dev/null <<EOF
	set term pdf
	set print "$fit"
	set output "$pdf"
	set fit logfile "/dev/null"
	set title "Histogram - $title"
	plot "$dat" u 1:(log(\$5)) w l lw 4 title "red",		\
	  '' u 1:(log(\$6)) w l lw 4 title "green",			\
	  '' u 1:(log(\$7)) w l lw 4 title "blue"

	f1(x) = a1*x + b1
	f2(x) = a2*x + b2
	f3(x) = a3*x + b3
	a1=0.1;b1=0.01;
	a2=0.1;b2=0.01;
	a3=0.1;b3=0.01;
	set xrange [0:0.35]
	fit f1(x) "$dat" u 1:(\$2**2) via a1,b1
	set xrange [0:0.9]
	fit f2(x) "$dat" u 1:(\$3**2) via a2,b2
	set xrange [0:0.5]
	fit f3(x) "$dat" u 1:(\$4**2) via a3,b3

	set xrange [0:1]
	set title "Noise levels - $title"
	plot "$dat" u 1:2 w l lw 4 title "red",				\
	  '' u 1:3 w l lw 4 title "green",				\
	  '' u 1:4 w l lw 4 title" blue",				\
	  '' u 1:(sqrt(f1(\$1))) w l lw 2 lt 1 title "red (fit)",	\
	  '' u 1:(sqrt(f2(\$1))) w l lw 2 lt 2 title "green (fit)",	\
	  '' u 1:(sqrt(f3(\$1))) w l lw 2 lt 3 title "blue (fit)"

	print a1, a2, a3, b1, b2, b3
EOF

	# Fitted parametric curves:
	echo "--> Fitted parametric curves"
	flat_dat="${pfm%.pfm}_flat.dat"
	curves_dat="${pfm%.pfm}_curves.dat"
	$noiseprofile $pfm -c $(cat $fit) > $flat_dat 2> $curves_dat

	# Data based histogram inversion:
	# $noiseprofile $pfm -h $dat > $flat_dat 2> $curves_dat
	echo "--> Flattened $pfm"
	flat_pdf="${pfm%.pfm}_flat.pdf"
	gnuplot 2>/dev/null << EOF
	set term pdf
	set output "$flat_pdf"
	set title "Flat noise levels - $title"
	plot "$flat_dat" u 1:2 w l lw 4 title "red",			\
	  '' u 1:3 w l lw 4 title "green",				\
	  '' u 1:4 w l lw 4 title "blue"
	set title "Flat histogram - $title"
	plot "$dat" u 1:(log(\$5)) w l lw 4 title "red",		\
	  '' u 1:(log(\$6)) w l lw 4 title "green",			\
	  '' u 1:(log(\$7)) w l lw 4 title "blue"
	set title "Conversion curves - $title"
	plot "$curves_dat" u 0:1 w l lw 4 title "red",			\
	  '' u 0:2 w l lw 4 title "green",				\
	  '' u 0:3 w l lw 4 title "blue"
EOF
	# Output preset for dt:
	echo "--> Save generated preset"
	a0=$(cat $fit | cut -f1 -d' ')
	a1=$(cat $fit | cut -f2 -d' ')
	a2=$(cat $fit | cut -f3 -d' ')
	b0=$(cat $fit | cut -f4 -d' ')
	b1=$(cat $fit | cut -f5 -d' ')
	b2=$(cat $fit | cut -f6 -d' ')

	echo "{N_(\"$model - $iso ISO\"),       \"$maker\",      \"$model\",              $iso,         {1.0f, 1.0f, {$a0, $a1, $a2}, {$b0, $b1, $b2}}}," >> "$presets"

	# Clean unused files.
	rm -f $dat $flat_dat $curves_dat $fit
	if [ "$keep_pfms" != "1" ]; then
		rm -f "$pfm"
	fi

	echo "$(basename "$pdf")" >> "$files_list"
	echo "$(basename "$flat_pdf")" >> "$files_list"
}

# --------------------------------------------------------------------
# Read command line arguments.
# --------------------------------------------------------------------

while getopts ":Cd:i:KPp:" opt; do
	case $opt in
	C)
		skip_correctness_check=1
		;;
	d)
		profiling_dir=$OPTARG
		;;
	i)
		if [ -z "$iso_settings" ]; then
			iso_settings=$OPTARG
		else
			iso_settings="$iso_settings $OPTARG"
		fi
		;;
	K)
		keep_pfms=1
		;;
	P)
		force_profiling_shots=1
		;;
	p)
		pause_between_shots=$OPTARG
		;;
	esac
done
shift $((OPTIND-1))

# Sort user-specified ISO settings.
if [ "$iso_settings" ]; then
	iso_settings=$(for iso in $iso_settings; do echo $iso; done | sort -n)
fi

# Check for required tools.
missing_tool=0
if ! tool_installed gphoto2; then
	cat 1>&2 <<EOF
(optional) gphoto2 is needed if you want this script to automatically
take the required pictures.

EOF
fi

if ! tool_installed darktable-cli; then
	cat 1>&2 <<EOF
darktable-cli (shipped with darktable 1.1 and later) is required to
export RAW images to jpeg and PFM files. Please install this package and
re-run this script.

EOF
	missing_tool=1
fi

if ! tool_installed convert; then
	cat 1>&2 <<EOF
ImageMagick is required to check input images correctness. Please
install this package and re-run this script.

EOF
	missing_tool=1
fi

if ! tool_installed exiv2; then
	cat 1>&2 <<EOF
exiv2 is required to read Exif from images. Please install this package
and re-run this script.

EOF
	missing_tool=1
fi

if ! tool_installed gnuplot; then
	cat 1>&2 <<EOF
gnuplot is required to generate the graphs used to estimate the quality
of the presets. Please install this command and re-run this script.

EOF
	missing_tool=1
fi

if ! tool_installed sqlite3; then
	cat 1>&2 <<EOF
sqlite3 is required to prepare a database allowing you to test the
generated presets. Please install this command and re-run this script.

EOF
	missing_tool=1
fi

if [ "$missing_tool" = "1" ]; then
	exit 1
fi

# --------------------------------------------------------------------
# Part #1: Get profiling shots.
# --------------------------------------------------------------------

# If the user didn't specified a profiling shots directory, use a
# default one.
#
# Defaults to /var/tmp/darktable-noise-profiling/$camera/profiling.

if [ -z "$profiling_dir" ]; then
	if camera_is_plugged; then
		camera=$(get_camera_name)
		subdir=$(echo $camera | sed -r 's/[^a-zA-Z0-9]/-/g')
		profiling_dir="/var/tmp/darktable-noise-profiling/$subdir/profiling"
		test -d "$profiling_dir" || mkdir -p "$profiling_dir"
	else
		cat <<EOF
ERROR: Please specify a directory to read or write profiling shots
(using the "-d" flag) or plug your camera and turn it on.
EOF
		exit 1
	fi
fi

files_list="$profiling_dir/output-files-list.txt"
rm -f "$files_list"

# Check the profiling shots to see if there's at least one shot for
# each ISO settings, either specified by the user, or supported by the
# camera.

echo "===> Checking existing profiling RAW images"
for image in "$profiling_dir"/*; do
	if [ "$image" = "$profiling_dir/*" ]; then
		# Directory empty.
		break
	fi

	case "$image" in
	*.jpg)
		# Skip jpeg files, if any.
		continue
		;;
	esac

	iso=$(get_image_iso "$image")
	if [ -z "$iso" ]; then
		# Not an image.
		continue
	fi

	echo "--> Found ISO $iso image: $image"

	# Record filename for this ISO setting.
	images=$(get_var "images_$iso")
	if [ -z "$image" ]; then
		images=$image
	else
		images="$images $image"
	fi
	set_var "images_$iso" "$images"

	# Add ISO setting to a list.
	case "$shots_for_iso_settings" in
	$iso|$iso\ *|*\ $iso\ *|*\ $iso)
		;;
	*)
		if [ -z "$shots_for_iso_settings" ]; then
			shots_for_iso_settings=$iso
		else
			shots_for_iso_settings="$shots_for_iso_settings $iso"
		fi
		;;
	esac
done

do_profiling_shots=0
if [ -z "$shots_for_iso_settings" -o "$force_profiling_shots" = "1" ]; then
	do_profiling_shots=1
fi
if [ "$iso_settings" ]; then
	for iso in $iso_settings; do
		images=$(get_var "images_$iso")
		if [ -z "$images" ]; then
			do_profiling_shots=1
		fi
	done
else
	iso_settings=$shots_for_iso_settings
fi

if [ "$do_profiling_shots" = "1" ]; then
	# The profiling shots directory is empty. Check for the camera
	# presence, and if no camera is found, ask the user to plug in
	# his camera or point to an appropriate directory.

	profiling_note_displayed=0
	profiling_note="Important note about the required images:

    o  The subject must contain both under-exposed AND over-exposed
       areas. A possible subject could be a sunny window (or an in-door
       light) on half of the picture and a dark/shadowed in-door object on
       the other half.

    o  Disable auto-focus and put everything out of focus."

	if ! camera_is_plugged; then
		profiling_note_displayed=1
		cat <<EOF

Noise profiling requires at least a RAW image per supported ISO setting.

Either:

    o  Plug your camera to this computer and, when detected, hit Return.
       This script will query the camera for supported ISO settings and
       take the appropriate images.

    o  Type Ctrl+C, take at least one image per supported ISO setting and
       put them in a dedicated directory. Then, re-run this script and be
       sure to indicate this directory by using the "-d" flag.

$profiling_note
EOF
		read answer
	fi
	while ! camera_is_plugged; do
		cat <<EOF
ERROR: No camera found by gphoto2(1)!

Retry or check gphoto2 documentation.
EOF
		read answer
	done

	# If we reach this part, a camera is plugged in and the user
	# wants us to take the pictures for him.

	# If he didn't specify any ISO settings, query the camera.
	if [ -z "$iso_settings" ]; then
		iso_settings=$(get_camera_iso_settings)
	fi
	iso_settings=$(for iso in $iso_settings; do echo $iso; done | sort -n)

	camera=$(get_camera_name)

	# We are now ready to take pictures for each supported/wanted
	# ISO settings.

	# TODO: For now, we take one image per ISO setting. When
	# benchmark is automated, this value can be raised to 3 for
	# instance, and the benchmark script will choose the best
	# preset.
	shots_per_iso=1
	case $(uname -s) in
	Linux) shots_seq=$(seq $shots_per_iso) ;;
	*BSD)  shots_seq=$(jot $shots_per_iso) ;;
	esac

	cd "$profiling_dir"
	for iso in $iso_settings; do
		if [ "$force_profiling_shots" = 1 ]; then
			# Remove existing shots for this ISO setting.
			echo "--> (remove ISO $iso existing shots)"
			files=$(get_var "images_$iso")
			for file in $files; do
				rm -v $file
			done
			set_var "images_$iso" ""
		fi

		images=$(get_var "images_$iso")
		if [ "$images" ]; then
			# We already have images for this ISO setting,
			# continue with the next one.
			continue
		fi

		echo
		echo "===> Taking $shots_per_iso profiling shot(s) for \"$camera - ISO $iso\""
		if [ "$profiling_note_displayed" = "0" ]; then
			profiling_note_displayed=1
			cat <<EOF

$profiling_note
EOF
			read answer
		fi

		if [ -z "$raw_id" ]; then
			raw_id=$(get_camera_raw_setting)
		fi

		# This script will do $shots_seq shots for each ISO setting.
		for i in $shots_seq; do
			if [ "$pause_between_shots" -a "$not_first_round" ]; then
				echo "(waiting $pause_between_shots seconds before shooting)"
				sleep "$pause_between_shots"
			fi
			not_first_round=1

			gphoto2						\
			 --set-config /main/imgsettings/imageformat=$raw_id\
			 --set-config /main/imgsettings/iso=$iso	\
			 --filename="$iso-$i.%C"			\
			 --capture-image-and-download

			image=$(ls -t "$profiling_dir/$iso-$i".* | head -n 1)

			images=$(get_var "images_$iso")
			if [ -z "$image" ]; then
				images=$image
			else
				images="$images $image"
			fi
			set_var "images_$iso" "$images"
		done
	done
	cd -
fi

echo
if [ "$skip_correctness_check" = "1" ]; then
	echo "===> Summing up profiling RAW images + Jpeg export"
else
	echo "===> Checking profiling RAW images correctness + Jpeg export"
fi
check_correctness="$scriptdir"/check-image-correctness
for iso in $iso_settings; do
	echo "--> ISO $iso:"
	images=$(get_var "images_$iso")
	for image in $images; do
		echo "    $image"

		# Export RAW file to jpeg file, then make a thumbnail
		# from this jpeg. The large jpeg file is used to perform
		# correctness checks. The small jpeg file added to the
		# final tarball to have a preview of the original RAW
		# file and a copy of the Exif metadata.
		jpeg_export="${image%.*}-large.jpg"
		jpeg_thumb="${image%.*}-thumb.jpg"
		if [ ! -f "$jpeg_export" -o "$image" -nt "$jpeg_export" -o "$0" -nt "$jpeg_export" ]; then
			rm -f "$jpeg_export"
			darktable-cli "$image" "$jpeg_export" 1>/dev/null 2>&1
			rm -f "$image.xmp"

			convert "$jpeg_export" -resize 1024x1024 "$jpeg_thumb"
		fi
		echo "$(basename "$jpeg_thumb")" >> $files_list

		if [ "$skip_correctness_check" != "1" ]; then
			if ! "$check_correctness" "$image" "$jpeg_export"; then
				if [ "$incorrect_isos" ]; then
					incorrect_isos="$iso"
				else
					incorrect_isos="$incorrect_isos $iso"
				fi
			fi
		fi
	done
done

if [ "$incorrect_isos" ]; then
	cat <<EOF

The following ISO settings have incorrect images:
EOF
	for iso in $incorrect_isos; do
		echo "    o  $iso ISO"
	done
	cat <<EOF

Please read the error messages associated with each file above, check
your subject and re-do the shots.
EOF
	exit 1
fi

# --------------------------------------------------------------------
# Part #2: Profile all images.
# --------------------------------------------------------------------

# First, prepare the working directory:
#   o  build tools
#   o  copy darktable database
#   o  remove previous presets

echo
echo "===> Prepare profiling job"

presets="$profiling_dir/presets.txt"

echo "--> Build profiling tools"
make -C "$scriptdir"

echo "--> Copy darktable library for testing purpose"
database="$profiling_dir/library.db"
database_orig="$HOME/.config/darktable/library.db"
if [ ! -f "$database_orig" ]; then
	cat <<EOF
ERROR: Please run darktable at least once to create an initial library
or copy some valid library to $database manually before running this
script. This is needed to setup a testing environment for your new
presets.
EOF
	exit 1
fi

cp "$database_orig" "$database"

echo "--> Remove previous presets"
rm -f "$profiling_dir"/*.pdf
rm -f "$profiling_dir"/*.fit
rm -f "$profiling_dir"/*.dat
rm -f "$presets"

# Now, for each shots, profile it.
cat <<EOF
--> Ready to profile images

NOTE: This process takes some time and a lot of memory and disc space
(up-to several gigabytes, depending on the number of ISO settings and
the size of the RAW files.
EOF

for iso in $iso_settings; do
	images=$(get_var "images_$iso")
	for from in $images; do
		profile_image "$from" "$presets" "$files_list"
	done
done

# Insert presets in the copied database.
echo
echo "===> Record preset in library for testing purpose"
"$scriptdir"/add-profile -d "$database" -P "[test] " "$presets"

# Prepare a tarball ready to be sent to the darktable team.
echo
echo "===> Prepare final tarball"
tarball="$profiling_dir"/dt-noiseprofile-$(date +'%Y%m%d').tar.gz
cd "$profiling_dir"
tar -cf - "$(basename "$presets")" $(cat "$(basename "$files_list")") | gzip > "$(basename "$tarball")"
cd -

echo "--> Cleanup"
rm -f "$files_list"

color_green=$'\033[32m'
color_reset=$'\033[0m'

echo ""
echo "${color_green}== Noise profiling done! ==${color_reset}"
cat <<EOF

Presets were inserted into $database. to test them locally, run:

  darktable --library $database

If you're happy with the results, post the following file to us:

  $tarball

If not, probably something went wrong. It's a good idea to get in touch
so we can help you sort it out.
EOF
